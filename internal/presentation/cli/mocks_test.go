// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cli

import (
	"context"

	"github.com/rdimidov/kvstore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// newMockapp creates a new instance of mockapp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockapp(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockapp {
	mock := &mockapp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockapp is an autogenerated mock type for the app type
type mockapp struct {
	mock.Mock
}

type mockapp_Expecter struct {
	mock *mock.Mock
}

func (_m *mockapp) EXPECT() *mockapp_Expecter {
	return &mockapp_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type mockapp
func (_mock *mockapp) Delete(ctx context.Context, key domain.Key) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockapp_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockapp_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockapp_Expecter) Delete(ctx interface{}, key interface{}) *mockapp_Delete_Call {
	return &mockapp_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *mockapp_Delete_Call) Run(run func(ctx context.Context, key domain.Key)) *mockapp_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockapp_Delete_Call) Return(err error) *mockapp_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockapp_Delete_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) error) *mockapp_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type mockapp
func (_mock *mockapp) Get(ctx context.Context, key domain.Key) (*domain.Entry, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) (*domain.Entry, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) *domain.Entry); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Key) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockapp_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockapp_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockapp_Expecter) Get(ctx interface{}, key interface{}) *mockapp_Get_Call {
	return &mockapp_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *mockapp_Get_Call) Run(run func(ctx context.Context, key domain.Key)) *mockapp_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockapp_Get_Call) Return(entry *domain.Entry, err error) *mockapp_Get_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockapp_Get_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) (*domain.Entry, error)) *mockapp_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type mockapp
func (_mock *mockapp) Set(ctx context.Context, key domain.Key, value domain.Value) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key, domain.Value) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockapp_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockapp_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *mockapp_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *mockapp_Set_Call {
	return &mockapp_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *mockapp_Set_Call) Run(run func(ctx context.Context, key domain.Key, value domain.Value)) *mockapp_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key), args[2].(domain.Value))
	})
	return _c
}

func (_c *mockapp_Set_Call) Return(err error) *mockapp_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockapp_Set_Call) RunAndReturn(run func(ctx context.Context, key domain.Key, value domain.Value) error) *mockapp_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockinterpr creates a new instance of mockinterpr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockinterpr(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockinterpr {
	mock := &mockinterpr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockinterpr is an autogenerated mock type for the interpr type
type mockinterpr struct {
	mock.Mock
}

type mockinterpr_Expecter struct {
	mock *mock.Mock
}

func (_m *mockinterpr) EXPECT() *mockinterpr_Expecter {
	return &mockinterpr_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mockinterpr
func (_mock *mockinterpr) Execute(ctx context.Context, raw string) (*domain.Entry, error) {
	ret := _mock.Called(ctx, raw)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Entry, error)); ok {
		return returnFunc(ctx, raw)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Entry); ok {
		r0 = returnFunc(ctx, raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, raw)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockinterpr_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockinterpr_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx
//   - raw
func (_e *mockinterpr_Expecter) Execute(ctx interface{}, raw interface{}) *mockinterpr_Execute_Call {
	return &mockinterpr_Execute_Call{Call: _e.mock.On("Execute", ctx, raw)}
}

func (_c *mockinterpr_Execute_Call) Run(run func(ctx context.Context, raw string)) *mockinterpr_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockinterpr_Execute_Call) Return(entry *domain.Entry, err error) *mockinterpr_Execute_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockinterpr_Execute_Call) RunAndReturn(run func(ctx context.Context, raw string) (*domain.Entry, error)) *mockinterpr_Execute_Call {
	_c.Call.Return(run)
	return _c
}
