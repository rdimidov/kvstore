// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cli

import (
	"context"

	"github.com/rdimidov/kvstore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// newMockgetter creates a new instance of mockgetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockgetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockgetter {
	mock := &mockgetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockgetter is an autogenerated mock type for the getter type
type mockgetter struct {
	mock.Mock
}

type mockgetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockgetter) EXPECT() *mockgetter_Expecter {
	return &mockgetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type mockgetter
func (_mock *mockgetter) Get(ctx context.Context, key domain.Key) (*domain.Entry, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) (*domain.Entry, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) *domain.Entry); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Key) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockgetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockgetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockgetter_Expecter) Get(ctx interface{}, key interface{}) *mockgetter_Get_Call {
	return &mockgetter_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *mockgetter_Get_Call) Run(run func(ctx context.Context, key domain.Key)) *mockgetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockgetter_Get_Call) Return(entry *domain.Entry, err error) *mockgetter_Get_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockgetter_Get_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) (*domain.Entry, error)) *mockgetter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// newMocksetter creates a new instance of mocksetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocksetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocksetter {
	mock := &mocksetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocksetter is an autogenerated mock type for the setter type
type mocksetter struct {
	mock.Mock
}

type mocksetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mocksetter) EXPECT() *mocksetter_Expecter {
	return &mocksetter_Expecter{mock: &_m.Mock}
}

// Set provides a mock function for the type mocksetter
func (_mock *mocksetter) Set(ctx context.Context, key domain.Key, value domain.Value) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key, domain.Value) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocksetter_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mocksetter_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *mocksetter_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *mocksetter_Set_Call {
	return &mocksetter_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *mocksetter_Set_Call) Run(run func(ctx context.Context, key domain.Key, value domain.Value)) *mocksetter_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key), args[2].(domain.Value))
	})
	return _c
}

func (_c *mocksetter_Set_Call) Return(err error) *mocksetter_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocksetter_Set_Call) RunAndReturn(run func(ctx context.Context, key domain.Key, value domain.Value) error) *mocksetter_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockdeleter creates a new instance of mockdeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockdeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockdeleter {
	mock := &mockdeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockdeleter is an autogenerated mock type for the deleter type
type mockdeleter struct {
	mock.Mock
}

type mockdeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockdeleter) EXPECT() *mockdeleter_Expecter {
	return &mockdeleter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type mockdeleter
func (_mock *mockdeleter) Delete(ctx context.Context, key domain.Key) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockdeleter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockdeleter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockdeleter_Expecter) Delete(ctx interface{}, key interface{}) *mockdeleter_Delete_Call {
	return &mockdeleter_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *mockdeleter_Delete_Call) Run(run func(ctx context.Context, key domain.Key)) *mockdeleter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockdeleter_Delete_Call) Return(err error) *mockdeleter_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockdeleter_Delete_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) error) *mockdeleter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// newMockappController creates a new instance of mockappController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockappController(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockappController {
	mock := &mockappController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockappController is an autogenerated mock type for the appController type
type mockappController struct {
	mock.Mock
}

type mockappController_Expecter struct {
	mock *mock.Mock
}

func (_m *mockappController) EXPECT() *mockappController_Expecter {
	return &mockappController_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type mockappController
func (_mock *mockappController) Delete(ctx context.Context, key domain.Key) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockappController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockappController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockappController_Expecter) Delete(ctx interface{}, key interface{}) *mockappController_Delete_Call {
	return &mockappController_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *mockappController_Delete_Call) Run(run func(ctx context.Context, key domain.Key)) *mockappController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockappController_Delete_Call) Return(err error) *mockappController_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockappController_Delete_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) error) *mockappController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type mockappController
func (_mock *mockappController) Get(ctx context.Context, key domain.Key) (*domain.Entry, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) (*domain.Entry, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) *domain.Entry); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Key) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockappController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockappController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *mockappController_Expecter) Get(ctx interface{}, key interface{}) *mockappController_Get_Call {
	return &mockappController_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *mockappController_Get_Call) Run(run func(ctx context.Context, key domain.Key)) *mockappController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockappController_Get_Call) Return(entry *domain.Entry, err error) *mockappController_Get_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockappController_Get_Call) RunAndReturn(run func(ctx context.Context, key domain.Key) (*domain.Entry, error)) *mockappController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type mockappController
func (_mock *mockappController) Set(ctx context.Context, key domain.Key, value domain.Value) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key, domain.Value) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockappController_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockappController_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *mockappController_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *mockappController_Set_Call {
	return &mockappController_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *mockappController_Set_Call) Run(run func(ctx context.Context, key domain.Key, value domain.Value)) *mockappController_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key), args[2].(domain.Value))
	})
	return _c
}

func (_c *mockappController_Set_Call) Return(err error) *mockappController_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockappController_Set_Call) RunAndReturn(run func(ctx context.Context, key domain.Key, value domain.Value) error) *mockappController_Set_Call {
	_c.Call.Return(run)
	return _c
}
