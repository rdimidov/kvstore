// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cli

import (
	"context"

	"github.com/rdimidov/kvstore/internal/application/services"
	"github.com/rdimidov/kvstore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// newMockparser creates a new instance of mockparser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockparser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockparser {
	mock := &mockparser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockparser is an autogenerated mock type for the parser type
type mockparser struct {
	mock.Mock
}

type mockparser_Expecter struct {
	mock *mock.Mock
}

func (_m *mockparser) EXPECT() *mockparser_Expecter {
	return &mockparser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function for the type mockparser
func (_mock *mockparser) Parse(raw string) (*services.Command, error) {
	ret := _mock.Called(raw)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *services.Command
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*services.Command, error)); ok {
		return returnFunc(raw)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *services.Command); ok {
		r0 = returnFunc(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Command)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(raw)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockparser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type mockparser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - raw
func (_e *mockparser_Expecter) Parse(raw interface{}) *mockparser_Parse_Call {
	return &mockparser_Parse_Call{Call: _e.mock.On("Parse", raw)}
}

func (_c *mockparser_Parse_Call) Run(run func(raw string)) *mockparser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockparser_Parse_Call) Return(command *services.Command, err error) *mockparser_Parse_Call {
	_c.Call.Return(command, err)
	return _c
}

func (_c *mockparser_Parse_Call) RunAndReturn(run func(raw string) (*services.Command, error)) *mockparser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// newMockhandler creates a new instance of mockhandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockhandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockhandler {
	mock := &mockhandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockhandler is an autogenerated mock type for the handler type
type mockhandler struct {
	mock.Mock
}

type mockhandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockhandler) EXPECT() *mockhandler_Expecter {
	return &mockhandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type mockhandler
func (_mock *mockhandler) Handle(ctx context.Context, cmd *services.Command) (*domain.Entry, error) {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *services.Command) (*domain.Entry, error)); ok {
		return returnFunc(ctx, cmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *services.Command) *domain.Entry); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *services.Command) error); ok {
		r1 = returnFunc(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockhandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type mockhandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx
//   - cmd
func (_e *mockhandler_Expecter) Handle(ctx interface{}, cmd interface{}) *mockhandler_Handle_Call {
	return &mockhandler_Handle_Call{Call: _e.mock.On("Handle", ctx, cmd)}
}

func (_c *mockhandler_Handle_Call) Run(run func(ctx context.Context, cmd *services.Command)) *mockhandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Command))
	})
	return _c
}

func (_c *mockhandler_Handle_Call) Return(entry *domain.Entry, err error) *mockhandler_Handle_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockhandler_Handle_Call) RunAndReturn(run func(ctx context.Context, cmd *services.Command) (*domain.Entry, error)) *mockhandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
