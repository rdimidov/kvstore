// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package wal

import (
	"context"
	"time"

	"github.com/rdimidov/kvstore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// newMockrepository creates a new instance of mockrepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockrepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockrepository {
	mock := &mockrepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockrepository is an autogenerated mock type for the repository type
type mockrepository struct {
	mock.Mock
}

type mockrepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockrepository) EXPECT() *mockrepository_Expecter {
	return &mockrepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type mockrepository
func (_mock *mockrepository) Delete(context1 context.Context, key domain.Key) error {
	ret := _mock.Called(context1, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key) error); ok {
		r0 = returnFunc(context1, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockrepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockrepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1
//   - key
func (_e *mockrepository_Expecter) Delete(context1 interface{}, key interface{}) *mockrepository_Delete_Call {
	return &mockrepository_Delete_Call{Call: _e.mock.On("Delete", context1, key)}
}

func (_c *mockrepository_Delete_Call) Run(run func(context1 context.Context, key domain.Key)) *mockrepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key))
	})
	return _c
}

func (_c *mockrepository_Delete_Call) Return(err error) *mockrepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockrepository_Delete_Call) RunAndReturn(run func(context1 context.Context, key domain.Key) error) *mockrepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type mockrepository
func (_mock *mockrepository) Set(context1 context.Context, key domain.Key, value domain.Value) error {
	ret := _mock.Called(context1, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Key, domain.Value) error); ok {
		r0 = returnFunc(context1, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockrepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockrepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1
//   - key
//   - value
func (_e *mockrepository_Expecter) Set(context1 interface{}, key interface{}, value interface{}) *mockrepository_Set_Call {
	return &mockrepository_Set_Call{Call: _e.mock.On("Set", context1, key, value)}
}

func (_c *mockrepository_Set_Call) Run(run func(context1 context.Context, key domain.Key, value domain.Value)) *mockrepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Key), args[2].(domain.Value))
	})
	return _c
}

func (_c *mockrepository_Set_Call) Return(err error) *mockrepository_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockrepository_Set_Call) RunAndReturn(run func(context1 context.Context, key domain.Key, value domain.Value) error) *mockrepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockwriter creates a new instance of mockwriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockwriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockwriter {
	mock := &mockwriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockwriter is an autogenerated mock type for the writer type
type mockwriter struct {
	mock.Mock
}

type mockwriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockwriter) EXPECT() *mockwriter_Expecter {
	return &mockwriter_Expecter{mock: &_m.Mock}
}

// Write provides a mock function for the type mockwriter
func (_mock *mockwriter) Write(entryMoqParams []entry) {
	_mock.Called(entryMoqParams)
	return
}

// mockwriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockwriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - entryMoqParams
func (_e *mockwriter_Expecter) Write(entryMoqParams interface{}) *mockwriter_Write_Call {
	return &mockwriter_Write_Call{Call: _e.mock.On("Write", entryMoqParams)}
}

func (_c *mockwriter_Write_Call) Run(run func(entryMoqParams []entry)) *mockwriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entry))
	})
	return _c
}

func (_c *mockwriter_Write_Call) Return() *mockwriter_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockwriter_Write_Call) RunAndReturn(run func(entryMoqParams []entry)) *mockwriter_Write_Call {
	_c.Run(run)
	return _c
}

// newMockconfig creates a new instance of mockconfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockconfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockconfig {
	mock := &mockconfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockconfig is an autogenerated mock type for the config type
type mockconfig struct {
	mock.Mock
}

type mockconfig_Expecter struct {
	mock *mock.Mock
}

func (_m *mockconfig) EXPECT() *mockconfig_Expecter {
	return &mockconfig_Expecter{mock: &_m.Mock}
}

// WALBatchFlushTimeout provides a mock function for the type mockconfig
func (_mock *mockconfig) WALBatchFlushTimeout() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WALBatchFlushTimeout")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// mockconfig_WALBatchFlushTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WALBatchFlushTimeout'
type mockconfig_WALBatchFlushTimeout_Call struct {
	*mock.Call
}

// WALBatchFlushTimeout is a helper method to define mock.On call
func (_e *mockconfig_Expecter) WALBatchFlushTimeout() *mockconfig_WALBatchFlushTimeout_Call {
	return &mockconfig_WALBatchFlushTimeout_Call{Call: _e.mock.On("WALBatchFlushTimeout")}
}

func (_c *mockconfig_WALBatchFlushTimeout_Call) Run(run func()) *mockconfig_WALBatchFlushTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockconfig_WALBatchFlushTimeout_Call) Return(duration time.Duration) *mockconfig_WALBatchFlushTimeout_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *mockconfig_WALBatchFlushTimeout_Call) RunAndReturn(run func() time.Duration) *mockconfig_WALBatchFlushTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// WALBatchSize provides a mock function for the type mockconfig
func (_mock *mockconfig) WALBatchSize() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WALBatchSize")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// mockconfig_WALBatchSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WALBatchSize'
type mockconfig_WALBatchSize_Call struct {
	*mock.Call
}

// WALBatchSize is a helper method to define mock.On call
func (_e *mockconfig_Expecter) WALBatchSize() *mockconfig_WALBatchSize_Call {
	return &mockconfig_WALBatchSize_Call{Call: _e.mock.On("WALBatchSize")}
}

func (_c *mockconfig_WALBatchSize_Call) Run(run func()) *mockconfig_WALBatchSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockconfig_WALBatchSize_Call) Return(n int) *mockconfig_WALBatchSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *mockconfig_WALBatchSize_Call) RunAndReturn(run func() int) *mockconfig_WALBatchSize_Call {
	_c.Call.Return(run)
	return _c
}

// WALDirName provides a mock function for the type mockconfig
func (_mock *mockconfig) WALDirName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WALDirName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// mockconfig_WALDirName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WALDirName'
type mockconfig_WALDirName_Call struct {
	*mock.Call
}

// WALDirName is a helper method to define mock.On call
func (_e *mockconfig_Expecter) WALDirName() *mockconfig_WALDirName_Call {
	return &mockconfig_WALDirName_Call{Call: _e.mock.On("WALDirName")}
}

func (_c *mockconfig_WALDirName_Call) Run(run func()) *mockconfig_WALDirName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockconfig_WALDirName_Call) Return(s string) *mockconfig_WALDirName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *mockconfig_WALDirName_Call) RunAndReturn(run func() string) *mockconfig_WALDirName_Call {
	_c.Call.Return(run)
	return _c
}

// WALMaxSegmentSize provides a mock function for the type mockconfig
func (_mock *mockconfig) WALMaxSegmentSize() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WALMaxSegmentSize")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// mockconfig_WALMaxSegmentSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WALMaxSegmentSize'
type mockconfig_WALMaxSegmentSize_Call struct {
	*mock.Call
}

// WALMaxSegmentSize is a helper method to define mock.On call
func (_e *mockconfig_Expecter) WALMaxSegmentSize() *mockconfig_WALMaxSegmentSize_Call {
	return &mockconfig_WALMaxSegmentSize_Call{Call: _e.mock.On("WALMaxSegmentSize")}
}

func (_c *mockconfig_WALMaxSegmentSize_Call) Run(run func()) *mockconfig_WALMaxSegmentSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockconfig_WALMaxSegmentSize_Call) Return(n int) *mockconfig_WALMaxSegmentSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *mockconfig_WALMaxSegmentSize_Call) RunAndReturn(run func() int) *mockconfig_WALMaxSegmentSize_Call {
	_c.Call.Return(run)
	return _c
}

// newMockinterpreter creates a new instance of mockinterpreter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockinterpreter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockinterpreter {
	mock := &mockinterpreter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockinterpreter is an autogenerated mock type for the interpreter type
type mockinterpreter struct {
	mock.Mock
}

type mockinterpreter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockinterpreter) EXPECT() *mockinterpreter_Expecter {
	return &mockinterpreter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mockinterpreter
func (_mock *mockinterpreter) Execute(ctx context.Context, raw string) (*domain.Entry, error) {
	ret := _mock.Called(ctx, raw)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *domain.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Entry, error)); ok {
		return returnFunc(ctx, raw)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Entry); ok {
		r0 = returnFunc(ctx, raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, raw)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockinterpreter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockinterpreter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx
//   - raw
func (_e *mockinterpreter_Expecter) Execute(ctx interface{}, raw interface{}) *mockinterpreter_Execute_Call {
	return &mockinterpreter_Execute_Call{Call: _e.mock.On("Execute", ctx, raw)}
}

func (_c *mockinterpreter_Execute_Call) Run(run func(ctx context.Context, raw string)) *mockinterpreter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockinterpreter_Execute_Call) Return(entry *domain.Entry, err error) *mockinterpreter_Execute_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *mockinterpreter_Execute_Call) RunAndReturn(run func(ctx context.Context, raw string) (*domain.Entry, error)) *mockinterpreter_Execute_Call {
	_c.Call.Return(run)
	return _c
}
